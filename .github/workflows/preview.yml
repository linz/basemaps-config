name: "Pull Request Preview"

on:
  pull_request:
    types: [labeled, opened, synchronize]

jobs:
  deploy:
    concurrency: preview-${{ github.head_ref }}
    if: |
      (github.event.action == 'labeled' && github.event.label.name == 'preview :world_map:') ||
      (github.event.action != 'labeled' && contains(github.event.pull_request.labels.*.name, 'preview :world_map:'))
    permissions:
      id-token: write
      deployments: write
      contents: write

    runs-on: ubuntu-latest
    env:
      BASEMAPS_CONTAINER: ghcr.io/linz/basemaps/cli:v6.29.0-21-gd632301c
      DOCKER_AWS_ENV: -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_SESSION_TOKEN -e AWS_REGION -e AWS_DEFAULT_REGION

    steps:
      - name: set STAGE variable in environment for next steps
        run: echo "STAGE=Pr${{ github.event.number }}" >> $GITHUB_ENV

      - name: create a github deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ env.STAGE }}
          ref: ${{ github.head_ref }}

      - uses: linz/action-typescript@v1

      - name: (Build) Prepare path for glyphs and sprites
        run: |
          mkdir -p assets/fonts/
          mkdir -p assets/sprites/

      - name: (Build) Build Glyphs
        uses: linz/action-build-pbf-glyphs@v1
        with:
          source: config/fonts/
          target: assets/fonts/
          
      - name: (Build) Build Sprites
        run: |
          docker run -v $PWD:$PWD ${DOCKER_AWS_ENV} ${BASEMAPS_CONTAINER} sprites --path $PWD/config/sprites/topographic/ --output $PWD/assets/sprites/
        
      - name: (Build) Bundle Assets Into Cotar
        run: |
          docker run -v $PWD:$PWD ${DOCKER_AWS_ENV} ${BASEMAPS_CONTAINER} bundle-assets --assets $PWD/assets/ --output $PWD/assets.tar.co
          
      - name: (NonProd) AWS Configure
        uses: aws-actions/configure-aws-credentials@v1.6.1
        with:
          aws-region: ap-southeast-2
          mask-aws-account-id: true
          role-to-assume: ${{ secrets.AWS_ROLE_NON_PROD }}

      - name: (NonProd - Config) Bundle Config File
        run: |
          docker run -v $PWD:$PWD ${DOCKER_AWS_ENV} ${BASEMAPS_CONTAINER} bundle --config $PWD/config --output $PWD/config.json

      - name: Deploy
        id: cdk_deploy
        run: |
          npx cdk deploy --require-approval never --outputs-file cdk.out.json
          node --eval "console.log('::set-output name=env_url::' + require('./cdk.out.json')['BasemapsConfig${STAGE}'].DeploymentUrl)"

      - name: update the github deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ env.STAGE }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: ${{ steps.cdk_deploy.outputs.env_url }}